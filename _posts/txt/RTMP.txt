# RTMP

## 握手
| client  | Server |
|-----C0 + C1----->|
|<---S0 + S1 + S2--|
|--------C2------->|

1. 服务端要等收到C0之后才能发送S1
2. 服务端要等收到C1之后才能发送S2
3. 服务端要等收到C2之后才能发送其他信息

4. 客户端要等收到S1之后才能发送C2
5. 客户端要等收到S2之后才能发送其他信息（控制信息的真是音视频数据）

1. 握手开始于客户端发送C0,C1数据块。服务端收到C0或C1后发送S0和S1
2. 当客户端收集齐S0和S1后，开始发送C2。当服务端收集齐C0和C1后开始发送S2
3. 当客户端和服务端分别收到S2和C2后，握手完成

1. C--->S：发送一个创建流的请求
2. S--->C：返回一个表示流的索引号
3. C--->S：开始发送
4. C--->S：发送音视频数据包（这些包在同一个频道channel并用流索引号来唯一标识）

## Chunk Stream---RTMP块流
Chunk Stream是对传输RTMP Chunk的流的逻辑上的抽象，C/S端都是在这个流上通信

## Message
Message指满足该协议格式的，可以切分成Chunk发送的消息，包含
Timestamp时间戳，Length长度，TypeId类型，Message Stream ID消息的流ID

## Chunking（Message分块）
RTMP在收发数据时并不是以Message为单位的，而是把Message拆分成Chunk发送，且必须在一个Chunk发完之后，才能开始发下一个Chunk。
每个Chunk中带有的Message ID代表属于哪个Message，接收端也会按照这个ID来将Chunk组装成Message

## 拆分原因
数据量较大的Message可以被拆分成较小的“Message”，这样可以避免优先级低的消息持续发送阻塞优先级高的数据（比如音视频传输中，会包含视频帧，音频帧，RTMP控制信息，如果持续发送音频帧和控制信息会造成视频帧的阻塞，出现卡顿现象）

## Chunk Size
Chunk默认大小为128Byte，传输过程中，通过Set Chunk Size的控制信息可以设置Chunk数据量的最大值，在发送端和接收端都会各自维护一个ChunkSize，可以分别设置来改变自己这一方发送的Chunk的最大大小