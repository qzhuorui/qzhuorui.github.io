# 音视频硬解码基础知识


## H264

### H264中，三种类型的帧数据：
I帧：帧内编码帧。是一个完整帧
P帧：前向预测编码帧。非完整帧，通过参考前面的I帧或P帧生成
B帧：双向预测内插编码帧。参考前后图像帧编码生成。B帧依赖其前最近一个I帧或P帧，以及其后最近一个P帧

### 图像组：GOP；关键帧：IDR
GOP：指一组变化不大的视频帧
GOP的第一帧称为关键帧：IDR
IDR都是I帧，可以防止一帧解码出错，导致后面所有帧解码出错问题。当解码器在解码到IDR时，会将之前的参考帧清空，重新开始一个新的序列，防止错误蔓延
```
关键帧都是I帧，但是I帧不一定是关键帧！！！
```

### DTS和PTS：
DTS：表示内存中数据流在什么时候开始送入解码器中进行解码。解码顺序的时间戳
PTS：表示解码后的视频帧什么时候被显示出来
```
在没有B帧情况下，DTS和PTS的输出顺序相同，一旦存在B帧，PTS和DTS则会不同！！！
```

### 帧的色彩空间
RGB，YUV两种色彩空间中。H264采用的是YUV
YUV存储方式分为两大类：
1. planar：先存储所有Y，紧接着所有U，最后是V
2. packed：每个像素点的Y,U,V连续交叉存储

```
packed存储方式已经非常少用，大部分视频都是采用planar存储方式
```
由于人眼对色度敏感度低，所以可以省略一些色度信息，即亮度共用一些色度信息，进而节省存储空间。
因此planar又区分一下几种格式：
1. YUV444：YUV 4:4:4采样，每一个Y对应一组UV分量
2. YUV422：YUV 4:2:2采样，每两个Y共用一组UV分量
3. YUV420：YUV 4:2:0采样，每四个Y共用一组UV分量 （最常用）
	1. YUV420P：三平面存储：数据组成为YYYYYYYYUUVV（如I420）或YYYYYYYYVVUU（如YV12）
	2. YUV420SP：两平面存储。分为两种类型YYYYYYYYUVUV（如NV12）或YYYYYYYYVUVU（如NV21）

### AAC编码简介：
AAC格式主要分为两种：
1. ADIF：音频数据交换格式。这种格式的特征是可以确定的找到这个音频数据的开始，不需要进行在音频数据流中间开始的解码，即它的解码必须在明确定义的开始处进行。常用在磁盘文件中
2. ADTS：音频数据传输流。这种格式的特征是它是一个有同步字的比特流，解码可以在这个流中任何位置开始（目前一般编码后的都是ADTS格式的音频流）

```
ADTS可以在任意帧解码，它每一帧都有头信息。
ADIF只有一个统一的头，所以必须得到所有的数据后解码
```
### 硬解码，软解码
软解码：利用CPU计算能力来解码，CPU不行的话解码速度会慢，手机会发热。但是由于使用统一算法，兼容性很强
硬解码：利用手机上专门的解码芯片来加上解码，速度会快，但是由于硬解码由各个厂家实现，质量参差不齐，兼容性容易出问题

### 音视频同步
可以用来实现同步的时间源有三个：
1. 视频时间戳
2. 音频时间戳
3. 外部时间戳

- 视频PTS：
人对声音比较敏感，并且视频解码的PTS通常不是连续的，而音频的PTS是比较连续的
- 音频PTS：
音频作为同步源，让画面适配音频是不错的选择，但是建议用系统时间，因为音频的话比较复杂的同步机制，而且有过多的耦合
- 系统时间：
使音视频彼此独立不干扰，又可以保证基本一致

#### 要实现音视频之间的同步，需要考虑两点：
1. 对比：在解码数据出来以后，检查PTS时间戳和当前系统流过的时间差距，快则延时，慢则直接播放
2. 矫正：在进入暂停或解码结束，重新恢复播放时，需要将系统流过的时间做一下矫正，将暂停的时间减去，恢复真正的流逝时间，即已播放时间

在不考虑暂停，恢复情况下，什么时候进行时间同步呢？
在数据解码出来以后，渲染之前！！！

#### 同步原理：
进入解码前，获取当前系统时间，存放在mStartTimeForSync中，一帧数据解码出来以后，计算当前系统时间和mStartTimeForSync的距离，也就是已经播放的时间，
如果当前帧的PTS大于流失的时间，进入sleep，否则直接渲染

暂停情况下的时间矫正：
在进入暂停以后，由于系统时间一直在走，而mStartTimeForSync并没有随着系统时间累加，所以当恢复播放之后，重新将mStartTimeForSync加上这段暂停的时间段
	计算方式有多种：
	1. 记录暂停的时间，恢复时用系统时间减去暂停时间，就是暂停的时间段，然后用mStartTimeForSync加上这个暂停的时间段，就是新的mStartTimeForSync
	2. 用恢复播放时的系统时间，减去当前正要播放的帧的PTS，得出的值就是mStartTimeForSync（常用方式）